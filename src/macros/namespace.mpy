macro import enum

from argparse import Namespace
import tokenize
from typing import List

from macros.types import MacroParser
from tokens import TokenCase, Tokens


enum NamespaceAST:
    Statement(identifier: tokenize.TokenInfo)
    Body(contents: str, stmts: List[NamespaceAST])
    Namespace(identifier: tokenize.TokenInfo, body: NamespaceAST)

# Go away unindention warning
assert True

class Parser(MacroParser):
    def body(self, tokens: Tokens):
        # <body> ::= <statement> {'\n' <statement>}
        statements = []
        lines = []

        current_line = -1
        indent = 1

        while not tokens.is_at_end():
            if current_line != tokens.peek().start[0]:
                current_line = tokens.peek().start[0]
                lines.append(tokens.peek().line)
            
            print(TokenCase().type(tokenize.NAME).string('export').check(tokens.peek()))
            if tokens.match(TokenCase().type(tokenize.NAME).string('export')):
                tokens.advance()
                identifier = tokens.consume(TokenCase().type(tokenize.NAME), "Expected identifier")
                statements.append(NamespaceAST.Statement(identifier))

                # Remove export from the last line
                last_line = lines.pop()
                lines.append(last_line.replace('export', '', 1))

            
            if tokens.match(TokenCase().type(tokenize.INDENT)):
                indent += 1
            
            if tokens.match(TokenCase().type(tokenize.DEDENT)):
                indent -= 1

            if indent == 0:
                break
            
            tokens.advance()

        return NamespaceAST.Body('\n'.join(lines), statements)

    def parse(self, tokens: Tokens) -> any:
        identifier = tokens.consume(TokenCase().type(tokenize.NAME), 'Expected namespace identifier')
        
        tokens.consume(TokenCase().type(tokenize.OP).string(':'), "Expected ':'")
        tokens.consume(TokenCase().type(tokenize.NEWLINE), "Expected newline")
        tokens.consume(TokenCase().type(tokenize.INDENT), "Expected indent")

        return NamespaceAST.Namespace(identifier, self.body(tokens))

