macro import enum
import pytest

import tokenize
from typing import Optional, List

enum Test:
    A
    """Test Doc Comment"""
    B(val1: str, val2: str)
    NoTypedArgs(val1, val2)
    FancyTypedParameters(token: tokenize.TokenInfo, type_parameters: Optional[str], many_type_params: List[Optional[str]])
    Frog

#
# Test cases
#
testA = Test.A()
testB = Test.B("a", "b")
testFrog = Test.Frog()

print("[TEST: Enum] Basic equality")

assert testA == Test.A
assert testB == Test.B
assert testFrog == Test.Frog

assert Test.A == testA
assert Test.B == testB
assert Test.Frog == testFrog

print("[TEST: Enum] Not equality")

assert testA != Test.B
assert testB != Test.A
assert testFrog != Test.A

# Comparing two enums should not fail
assert testB != testFrog
assert testA == testA

# Ensure that asserts against random types do not crash the program
assert testA != "Test"
assert testB != "Test"
assert testFrog != "Test"

